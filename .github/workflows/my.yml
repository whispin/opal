name: my Build and publish to Docker Hub
on:
  release:
    # job will automatically run after a new "release" is create on github.
    types: [created]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        dry_run:
          description: 'If true, will not push the built images to docker hub.'
          required: false
          default: 'false'

jobs:
  # this job will build, test and (potentially) push the docker images to docker hub
  #
  # BUILD PHASE:
  # - will auto tag the image according to the release tag / `git describe`.
  #
  # TEST PHASE:
  # - will run an e2e test with a modified docker compose.
  # - queries OPA data to check its state matches an expected value.
  # - state will match only if OPAL client successfully synced to OPAL server.
  # - outputs the docker compose logs to more easily investigate errors.
  #
  # PUSH PHASE:
  # - Runs only if test phase completes with no errors.
  # - Pushes images (built at BUILD PHASE) to docker hub.
  docker_build_and_publish:
    runs-on: ubuntu-latest
    steps:
      # BUILD PHASE
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: ${{ github.event.inputs.dry_run == 'true' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # pushes the *same* docker images that were previously tested as part of e2e sanity test.
      # each image is pushed with the versioned tag first, if it succeeds the image is pushed with the latest tag as well.
      - name: Build & Push client
        if: ${{ github.event.inputs.dry_run == 'true' }}
        id: build_push_client
        uses: docker/build-push-action@v4
        with:
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          target: client
          cache-from: type=registry,ref=whispin/opal-client:latest
          cache-to: type=inline
          tags: |
            whispin/opal-client:latest
